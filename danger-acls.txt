# Get current user and group SIDs
$mySid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
$myGroupSIDs = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).Groups | ForEach-Object {
    $_.Translate([System.Security.Principal.SecurityIdentifier]).Value
}
$mySIDList = $myGroupSIDs + $mySid

# Define the high-risk rights as enums (bitwise safe)
$dangerousRights = @(
    [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
    [System.DirectoryServices.ActiveDirectoryRights]::GenericWrite,
    [System.DirectoryServices.ActiveDirectoryRights]::WriteDacl,
    [System.DirectoryServices.ActiveDirectoryRights]::WriteOwner,
    [System.DirectoryServices.ActiveDirectoryRights]::ExtendedRight
)

$domainDN = ([ADSI]"").distinguishedName
$searcher = New-Object DirectoryServices.DirectorySearcher
$searcher.Filter = "(&(objectClass=user)(!(objectClass=computer)))"
$searcher.PropertiesToLoad.Add("distinguishedName") > $null
$searcher.PageSize = 500

$results = $searcher.FindAll()
$output = @()

foreach ($result in $results) {
    $dn = $result.Properties["distinguishedname"][0]
    try {
        $obj = [ADSI]("LDAP://$dn")
        $acls = $obj.psbase.ObjectSecurity.Access

        foreach ($ace in $acls) {
            # Convert ACE identity to SID
            $aceSid = $null
            try {
                $aceSid = $ace.IdentityReference.Translate([System.Security.Principal.SecurityIdentifier]).Value
            } catch {
                continue
            }

            # If current user or group is listed in ACE
            if ($mySIDList -contains $aceSid) {
                foreach ($right in $dangerousRights) {
                    if (($ace.ActiveDirectoryRights -band $right) -eq $right) {
                        $output += [PSCustomObject]@{
                            TargetUser        = $dn
                            MyAccessRight     = $right.ToString()
                            IdentityReference = $ace.IdentityReference.ToString()
                        }
                    }
                }
            }
        }
    } catch {
        Write-Host "‚ùå Failed to process $dn"
    }
}

# Print or write the results
if ($output.Count -eq 0) {
    Write-Host "`nüö´ No dangerous ACLs found for current user.`n"
} else {
    $output | Format-Table -AutoSize
    $output | Out-File Dangerous_ACLs_MyUser_CanAbuse.txt
    Write-Host "`n‚úÖ Saved to Dangerous_ACLs_MyUser_CanAbuse.txt`n"
}
