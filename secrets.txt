grep -rniE --color=always 'pass(word)?|secret|key|token|auth|pwd|username|user(name)?|credential|env|config|private|access' .

grep -rniI --color=always \
  --include='*.env' --include='*.py' --include='*.js' --include='*.json' \
  --include='*.sh' --include='*.txt' --include='*.conf' --include='*.yml' \
  --include='*.yaml' --include='*.ini' \
  -E '\b(pass(word)?|pwd|secret|token|apikey|api_key|auth(_token)?|access[_-]?key|private[_-]?key|client[_-]?secret|db[_-]?pass|cred(ent(ial)?s?)?|user(name)?|env)\b\s*[:=]\s*["'\''"]?[-A-Za-z0-9_@#\$%^&+=]{6,}["'\''"]?' .



LC_ALL=C grep -rniI --color=always \
  --include='*.env' --include='*.py' --include='*.js' --include='*.json' --include='*.sh' \
  --include='*.txt' --include='*.conf' --include='*.yml' --include='*.yaml' --include='*.ini' \
  -E '\b(pass(word)?|pwd|secret|token|apikey|api_key|auth(_token)?|access[_-]?key|private[_-]?key|client[_-]?secret|db[_-]?pass|cred(ent(ial)?s?)?|user(name)?|login|password|key|token|secret|auth)\b' .


grep -RniIH --color=never --exclude-dir={.git,node_modules,tmp,venv,__pycache__} \
    -E 'password|passwd|secret|token|apikey|key|credentials' . 2>/dev/null


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#!/bin/bash

# === Config ===
KEYWORDS="password|passwd|secret|token|apikey|key|credentials"
EXCLUDE_DIRS=".git,node_modules,tmp,venv,__pycache__"
OUTPUT=""
ONLY_PATHS=0
SHOW_LINES=1

# === Help Menu ===
usage() {
  echo "Usage: $0 [-o output_file] [--only-paths]"
  echo ""
  echo "Options:"
  echo "  -o FILE          Save output to FILE"
  echo "  --only-paths     Only show files with matches, not line content"
  echo "  -h, --help       Show this help"
  exit 1
}

# === Parse Args ===
while [[ $# -gt 0 ]]; do
  case "$1" in
    -o)
      OUTPUT="$2"
      shift 2
      ;;
    --only-paths)
      ONLY_PATHS=1
      SHOW_LINES=0
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo "Unknown argument: $1"
      usage
      ;;
  esac
done

# === Build Grep Command ===
EXCLUDES=$(echo "$EXCLUDE_DIRS" | sed 's/,/,--exclude-dir=/g')
EXCLUDE_ARG="--exclude-dir=${EXCLUDES}"

if [[ $ONLY_PATHS -eq 1 ]]; then
  CMD="grep -RIil --color=never $EXCLUDE_ARG -E \"$KEYWORDS\" . 2>/dev/null"
else
  CMD="grep -RniIH --color=never $EXCLUDE_ARG -E \"$KEYWORDS\" . 2>/dev/null"
fi

# === Run the Command ===
if [[ -n "$OUTPUT" ]]; then
  eval "$CMD" > "$OUTPUT"
  echo "Results saved to $OUTPUT"
else
  eval "$CMD"
fi
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

mysql parse :

awk '/Nmap scan report/{ip=$NF} /3306\/tcp\s+open/{print ip}' nmap/allforms


awk '
/^Nmap scan report for/ {ip=$(NF); found_ip=ip}
/1433\/tcp\s+open/ && found_ip { print found_ip; found_ip="" }
' nmap/allforms



NXC parser

import re
from collections import defaultdict

# === CONFIG ===
INPUT_FILE = "netexec_output.nxc"   # Change this to your NetExec output file
OUTPUT_FILE = "parsed_shares.txt"

# System/default shares to exclude
EXCLUDE_SHARES = {"ADMIN$", "C$", "IPC$", "PRINT$"}

# === Storage ===
shares_by_ip = defaultdict(list)

with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as f:
    for line in f:
        line = line.strip()
        parts = re.split(r'\s{2,}', line)
        
        # Check for valid share line
        if len(parts) >= 5 and parts[0] == 'SMB':
            ip = parts[1]
            share = parts[4]
            perms = parts[5] if len(parts) > 5 else ''
            remark = parts[6] if len(parts) > 6 else ''
            
            if share.upper() not in EXCLUDE_SHARES and perms.strip():
                shares_by_ip[ip].append((share.strip(), perms.strip().upper(), remark.strip()))

# === Write formatted output ===
with open(OUTPUT_FILE, "w") as out:
    for ip, shares in shares_by_ip.items():
        out.write(f"{ip}\n")
        for share, perms, remark in shares:
            out.write(f"  {share:<15} {perms:<10} {remark}\n")
        out.write("\n")

print(f"[+] Done! Output written to {OUTPUT_FILE}")
