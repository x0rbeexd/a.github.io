awk '$6 ~ /READ|WRITE/ { print $2, $4, $5, $6 }' nxc_output.txt > filtered_shares.txt



#!/bin/bash

INPUT="nxc_output.txt"
OUTPUT="final_filtered_grouped.txt"

# List of excluded system shares
EXCLUDE_RE="^(C\$|ADMIN\$|IPC\$|NETLOGON|SYSVOL)$"

> "$OUTPUT" # Clear output

awk -v exclude="$EXCLUDE_RE" '
$6 == "Enumerated" && $7 == "shares" {
    current_ip = $2;
    current_host = $4;
    print current_ip, current_host >> "'$OUTPUT'"
    next
}

$6 ~ /READ|WRITE/ && $5 !~ exclude {
    printf "    %-20s %s\n", $5, $6 >> "'$OUTPUT'"
}
' "$INPUT"

echo "[+] Grouped output saved to $OUTPUT"



 ---------------------------- Pasrse For Only Redable shares by using nxc logs

import re
from collections import defaultdict

log_file = "yourfile.txt"      # Replace with your log filename
output_file = "readable_shares.txt"

# List of excluded shares
excluded_shares = {'ADMIN$', 'C$', 'IPC$', 'SYSVOL', 'NETLOGON', 'print$'}

# Store shares per "IP HOSTNAME"
shares_by_host = defaultdict(set)

with open(log_file, "r", encoding="utf-8") as f:
    lines = f.readlines()

current_ip = None
current_host = None
processing = False

for line in lines:
    line = line.strip()

    # If share enumeration starts, extract IP and hostname
    if "[*] Enumerated shares" in line:
        match = re.search(r"SMB\s+(\d+\.\d+\.\d+\.\d+)\s+\d+\s+(\S+)", line)
        if match:
            current_ip = match.group(1)
            current_host = match.group(2)
            processing = True
        continue

    # If we are in processing mode and this line looks like a share line
    if processing:
        parts = re.split(r'\s{2,}', line)
        if len(parts) >= 2:
            share = parts[0].strip()
            perm = parts[1].strip()
            if "READ" in perm.upper() and share.upper() not in excluded_shares:
                key = f"{current_ip} {current_host}"
                shares_by_host[key].add(share)
        elif "INFO" in line and "Enumerated shares" not in line:
            # Stop processing if a new unrelated log line appears
            processing = False

# Write output
with open(output_file, "w") as f:
    for host, shares in sorted(shares_by_host.items()):
        if shares:
            f.write(f"{host}: {', '.join(sorted(shares))}\n")


